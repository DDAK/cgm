alpha=0.2,
inherit.aes = FALSE) +
geom_vline(xintercept = activity_df %>%
dplyr::filter(Activity == "Event" & Comment == "awake") %>% select("Start") %>% unlist(),
color = "green") +
geom_vline(xintercept = activity_df %>%
dplyr::filter(Activity == "Food") %>% select("Start") %>% unlist(),
color = "yellow")+
geom_text(data = activity_df %>%
dplyr::filter(Activity == "Food") %>% select("Start","Comment") ,
aes(x=Start,y=50, angle=90, hjust = FALSE,  label = Comment),
size = 6) +
labs(title = "Glucose (mg/dL)", subtitle = start) +  theme(plot.title = element_text(size=22))+
scale_x_datetime(limits = c(start,end),
date_labels = "%m/%d %H:%M",
timezone = "US/Pacific")
}
# returns a dataframe giving all glucose values within "timelength" of a specific activity
food_effect <- function( foodlist = c("Oatmeal","Oatmeal w cinnamon"), activity_df = activity_raw, glucose_df = glucose_raw, timelength = lubridate::hours(2)){
#food_df <- activity_df %>% dplyr::filter(str_detect(str_to_lower(activity_df$Comment),pattern = foodname))
food_df <- activity_df %>% dplyr::filter(Comment %in% foodlist)
food_df$Comment <- paste0(food_df$Comment,rownames(food_df))
food_df_interval <- interval(food_df$Start,food_df$Start + hours(1))
food_glucose <- glucose_df %>% dplyr::filter(apply(sapply(glucose_df$time,function(x) x %within% food_df_interval),2,any))
# food_glucose <- glucose_df %>% dplyr::filter(sapply(glucose_df$time,function(x) x %within% food_df_interval))
f <- cbind(food_glucose[1,],experiment = "test")
a = NULL
for(i in food_df$Start){
i_time <- as_datetime(i, tz = "US/Pacific")
# < rbind(i,a)
g <- glucose_df %>% dplyr::filter(time %within% interval(i_time - minutes(10), i_time + timelength))
#print(g)
p = match(as_datetime(i),food_df$Start)
f <- rbind(f,cbind(g,experiment = food_df$Comment[p]))
}
foods_experiment <- f[-1,]
foods_experiment
}
foodlist <- c("Oatmeal (plain)","Oatmeal w/milk","Oatmeal w/butter", "Oatmeal w/cinnamon")
food_effect(foodlist) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after eating oatmeal", x = "Minutes", y = "mg/dL")
library(readxl)
libre_raw <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Librelink.xlsx"))
libre_raw$`Meter Timestamp` <- lubridate::force_tz(libre_raw$`Meter Timestamp`, "US/Pacific")
activity_raw_2019 <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Rik Activity 2019.xlsx"),
sheet = "2019")
activity_raw_2018 <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Rik Activity 2019.xlsx"),
sheet = "2018")
activity_raw <- rbind(activity_raw_2018,activity_raw_2019)
library(readxl)
libre_raw <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Librelink.xlsx"))
libre_raw$`Meter Timestamp` <- lubridate::force_tz(libre_raw$`Meter Timestamp`, "US/Pacific")
activity_raw_2019 <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Rik Activity 2019.xlsx"),
sheet = "2019")
activity_raw_2018 <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Rik Activity 2019.xlsx"),
sheet = "2018")
activity_raw <- rbind(activity_raw_2018,activity_raw_2019)
library(tidyverse)
library(lubridate)
library(ggthemes)
activity_raw$Start <- activity_raw$Start %>% lubridate::parse_date_time(order = "ymd HMS",tz = "US/Pacific")
activity_raw$End <- activity_raw$End %>% lubridate::parse_date_time(order = "ymd HMS", tz = "US/Pacific")
glucose <- libre_raw %>% select(time = "Meter Timestamp",
scan = "Scan Glucose(mg/dL)",
hist = "Historic Glucose(mg/dL)",
strip = "Strip Glucose(mg/dL)",
food = "Notes")
#glucose$time <- readr::parse_datetime(libre_raw$`Meter Timestamp`,locale = locale(tz="US/Pacific"))
glucose$time <- as_datetime(libre_raw$`Meter Timestamp`, tz = "US/Pacific")
#
glucose$value <- dplyr::if_else(is.na(glucose$scan),glucose$hist,glucose$scan)
# apply correction for faulty 2019-01-08 sensor
glucose$value <- dplyr::if_else(glucose$time>as_datetime("2019-01-08"),glucose$value+35,glucose$value)
glucose_raw <- glucose
# libre_raw$`Meter Timestamp` %>% lubridate::parse_date_time(order = "ymd HMS",tz = "US/Pacific")
library(readxl)
libre_raw <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Librelink.xlsx"))
libre_raw$`Meter Timestamp` <- lubridate::force_tz(libre_raw$`Meter Timestamp`, "US/Pacific")
activity_raw_2019 <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Rik Activity 2019.xlsx"),
sheet = "2019")
activity_raw_2018 <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Rik Activity 2019.xlsx"),
sheet = "2018")
activity_raw <- rbind(activity_raw_2018,activity_raw_2019)
library(tidyverse)
library(lubridate)
library(ggthemes)
activity_raw$Start <- activity_raw$Start %>% lubridate::parse_date_time(order = "ymd HMS",tz = "US/Pacific")
activity_raw$End <- activity_raw$End %>% lubridate::parse_date_time(order = "ymd HMS", tz = "US/Pacific")
glucose <- libre_raw %>% select(time = "Meter Timestamp",
scan = "Scan Glucose(mg/dL)",
hist = "Historic Glucose(mg/dL)",
strip = "Strip Glucose(mg/dL)",
food = "Notes")
#glucose$time <- readr::parse_datetime(libre_raw$`Meter Timestamp`,locale = locale(tz="US/Pacific"))
glucose$time <- as_datetime(libre_raw$`Meter Timestamp`, tz = "US/Pacific")
#
glucose$value <- dplyr::if_else(is.na(glucose$scan),glucose$hist,glucose$scan)
# apply correction for faulty 2019-01-08 sensor
#glucose$value <- dplyr::if_else(glucose$time>as_datetime("2019-01-08"),glucose$value+35,glucose$value)
glucose_raw <- glucose
# libre_raw$`Meter Timestamp` %>% lubridate::parse_date_time(order = "ymd HMS",tz = "US/Pacific")
# a handy ggplot object that draws a band through the "healthy" target zones across the width of any graph:
glucose_target_gg <-   geom_rect(aes(xmin=as.POSIXct(-Inf,  origin = "1970-01-01"),
xmax=as.POSIXct(Inf,  origin= "1970-01-01"),
ymin=100,ymax=140),
alpha = 0.01, fill = "#CCCCCC",
inherit.aes = FALSE)
# show glucose levels between start and end times
cgm_display <- function(start=lubridate::now()-lubridate::hours(18),
end=now(),
activity_df=activity_raw,
glucose_df=glucose_raw) {
ggplot(glucose_df ,aes(x=time,y=value)) + geom_line(size=2, color = "red")+
geom_point(stat = "identity", aes(x=time,y=strip), color = "blue")+
glucose_target_gg +
geom_rect(data=activity_df %>% dplyr::filter(Activity == "Sleep") %>%
select(xmin = Start,xmax = End) %>% cbind(ymin = -Inf, ymax = Inf),
aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
fill="red",
alpha=0.2,
inherit.aes = FALSE) +
geom_rect(data=activity_df %>% dplyr::filter(Activity == "Exercise") %>%
select(xmin = Start,xmax = End),
aes(xmin=xmin,xmax=xmax,ymin=-Inf,ymax=Inf),
fill="blue",
alpha=0.2,
inherit.aes = FALSE) +
geom_vline(xintercept = activity_df %>%
dplyr::filter(Activity == "Event" & Comment == "awake") %>% select("Start") %>% unlist(),
color = "green") +
geom_vline(xintercept = activity_df %>%
dplyr::filter(Activity == "Food") %>% select("Start") %>% unlist(),
color = "yellow")+
geom_text(data = activity_df %>%
dplyr::filter(Activity == "Food") %>% select("Start","Comment") ,
aes(x=Start,y=50, angle=90, hjust = FALSE,  label = Comment),
size = 6) +
labs(title = "Glucose (mg/dL)", subtitle = start) +  theme(plot.title = element_text(size=22))+
scale_x_datetime(limits = c(start,end),
date_labels = "%m/%d %H:%M",
timezone = "US/Pacific")
}
# returns a dataframe giving all glucose values within "timelength" of a specific activity
food_effect <- function( foodlist = c("Oatmeal","Oatmeal w cinnamon"), activity_df = activity_raw, glucose_df = glucose_raw, timelength = lubridate::hours(2)){
#food_df <- activity_df %>% dplyr::filter(str_detect(str_to_lower(activity_df$Comment),pattern = foodname))
food_df <- activity_df %>% dplyr::filter(Comment %in% foodlist)
food_df$Comment <- paste0(food_df$Comment,rownames(food_df))
food_df_interval <- interval(food_df$Start,food_df$Start + hours(1))
food_glucose <- glucose_df %>% dplyr::filter(apply(sapply(glucose_df$time,function(x) x %within% food_df_interval),2,any))
# food_glucose <- glucose_df %>% dplyr::filter(sapply(glucose_df$time,function(x) x %within% food_df_interval))
f <- cbind(food_glucose[1,],experiment = "test")
a = NULL
for(i in food_df$Start){
i_time <- as_datetime(i, tz = "US/Pacific")
# < rbind(i,a)
g <- glucose_df %>% dplyr::filter(time %within% interval(i_time - minutes(10), i_time + timelength))
#print(g)
p = match(as_datetime(i),food_df$Start)
f <- rbind(f,cbind(g,experiment = food_df$Comment[p]))
}
foods_experiment <- f[-1,]
foods_experiment
}
startDate <- now() - days(2) #min(glucose$time)
#cgm_display(startDate,now()-days(6))
cgm_display(startDate,startDate+days(2))
foodlist <- c("Salmon")
food_effect(foodlist, timelength = hours(1)) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after eating an apple", x = "Minutes", y = "mg/dL")
#pdf("icecream.pdf", width = 11, height = 8.5)
cgm_display(start = min(glucose_raw$time),min(glucose_raw$time)+hours(24))
#dev.off()
cgm_display(start = max(glucose_raw$time)-days(1), end = max(glucose_raw$time))
theme_set(theme_stata())
foodlist <- c("Oatmeal (plain)","Oatmeal w/milk","Oatmeal w/butter", "Oatmeal w/cinnamon")
food_effect(foodlist) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after eating oatmeal", x = "Minutes", y = "mg/dL")
foodlist <- c("Potato (reheated)","Lamb + potato")
food_effect(foodlist) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after eating potatoes", x = "Minutes", y = "mg/dL")
## Beer
foodlist <- activity_raw %>% dplyr::filter(str_detect(str_to_lower(activity_raw$Comment),pattern = "beer")) %>% .$Comment
food_effect(foodlist) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after drinking beer", x = "Minutes", y = "mg/dL")
#
## Pasta
foodlist <- c("Pesto pasta","Pasta whole wheat w/tomato",  "Pasta mushroom chicken")
food_effect(foodlist) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after eating pasta", x = "Minutes", y = "mg/dL")
#
## Apples
foodlist <- c("Apple")
food_effect(foodlist, timelength = hours(1)) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after eating an apple", x = "Minutes", y = "mg/dL")
library(readxl)
libre_raw <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Librelink.xlsx"))
libre_raw$`Meter Timestamp` <- lubridate::force_tz(libre_raw$`Meter Timestamp`, "US/Pacific")
activity_raw_2019 <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Rik Activity 2019.xlsx"),
sheet = "2019")
activity_raw_2018 <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Rik Activity 2019.xlsx"),
sheet = "2018")
activity_raw <- rbind(activity_raw_2018,activity_raw_2019)
library(tidyverse)
library(lubridate)
library(ggthemes)
activity_raw$Start <- activity_raw$Start %>% lubridate::parse_date_time(order = "ymd HMS",tz = "US/Pacific")
activity_raw$End <- activity_raw$End %>% lubridate::parse_date_time(order = "ymd HMS", tz = "US/Pacific")
glucose <- libre_raw %>% select(time = "Meter Timestamp",
scan = "Scan Glucose(mg/dL)",
hist = "Historic Glucose(mg/dL)",
strip = "Strip Glucose(mg/dL)",
food = "Notes")
#glucose$time <- readr::parse_datetime(libre_raw$`Meter Timestamp`,locale = locale(tz="US/Pacific"))
glucose$time <- as_datetime(libre_raw$`Meter Timestamp`, tz = "US/Pacific")
#
glucose$value <- dplyr::if_else(is.na(glucose$scan),glucose$hist,glucose$scan)
# apply correction for faulty 2019-01-08 sensor
#glucose$value <- dplyr::if_else(glucose$time>as_datetime("2019-01-08"),glucose$value+35,glucose$value)
glucose_raw <- glucose
# libre_raw$`Meter Timestamp` %>% lubridate::parse_date_time(order = "ymd HMS",tz = "US/Pacific")
# a handy ggplot object that draws a band through the "healthy" target zones across the width of any graph:
glucose_target_gg <-   geom_rect(aes(xmin=as.POSIXct(-Inf,  origin = "1970-01-01"),
xmax=as.POSIXct(Inf,  origin= "1970-01-01"),
ymin=100,ymax=140),
alpha = 0.01, fill = "#CCCCCC",
inherit.aes = FALSE)
# show glucose levels between start and end times
cgm_display <- function(start=lubridate::now()-lubridate::hours(18),
end=now(),
activity_df=activity_raw,
glucose_df=glucose_raw) {
ggplot(glucose_df ,aes(x=time,y=value)) + geom_line(size=2, color = "red")+
geom_point(stat = "identity", aes(x=time,y=strip), color = "blue")+
glucose_target_gg +
geom_rect(data=activity_df %>% dplyr::filter(Activity == "Sleep") %>%
select(xmin = Start,xmax = End) %>% cbind(ymin = -Inf, ymax = Inf),
aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
fill="red",
alpha=0.2,
inherit.aes = FALSE) +
geom_rect(data=activity_df %>% dplyr::filter(Activity == "Exercise") %>%
select(xmin = Start,xmax = End),
aes(xmin=xmin,xmax=xmax,ymin=-Inf,ymax=Inf),
fill="blue",
alpha=0.2,
inherit.aes = FALSE) +
geom_vline(xintercept = activity_df %>%
dplyr::filter(Activity == "Event" & Comment == "awake") %>% select("Start") %>% unlist(),
color = "green") +
geom_vline(xintercept = activity_df %>%
dplyr::filter(Activity == "Food") %>% select("Start") %>% unlist(),
color = "yellow")+
geom_text(data = activity_df %>%
dplyr::filter(Activity == "Food") %>% select("Start","Comment") ,
aes(x=Start,y=50, angle=90, hjust = FALSE,  label = Comment),
size = 6) +
labs(title = "Glucose (mg/dL)", subtitle = start) +  theme(plot.title = element_text(size=22))+
scale_x_datetime(limits = c(start,end),
date_labels = "%m/%d %H:%M",
timezone = "US/Pacific")
}
# returns a dataframe giving all glucose values within "timelength" of a specific activity
food_effect <- function( foodlist = c("Oatmeal","Oatmeal w cinnamon"), activity_df = activity_raw, glucose_df = glucose_raw, timelength = lubridate::hours(2)){
#food_df <- activity_df %>% dplyr::filter(str_detect(str_to_lower(activity_df$Comment),pattern = foodname))
food_df <- activity_df %>% dplyr::filter(Comment %in% foodlist)
food_df$Comment <- paste0(food_df$Comment,rownames(food_df))
food_df_interval <- interval(food_df$Start,food_df$Start + hours(1))
food_glucose <- glucose_df %>% dplyr::filter(apply(sapply(glucose_df$time,function(x) x %within% food_df_interval),2,any))
# food_glucose <- glucose_df %>% dplyr::filter(sapply(glucose_df$time,function(x) x %within% food_df_interval))
f <- cbind(food_glucose[1,],experiment = "test")
a = NULL
for(i in food_df$Start){
i_time <- as_datetime(i, tz = "US/Pacific")
# < rbind(i,a)
g <- glucose_df %>% dplyr::filter(time %within% interval(i_time - minutes(10), i_time + timelength))
#print(g)
p = match(as_datetime(i),food_df$Start)
f <- rbind(f,cbind(g,experiment = food_df$Comment[p]))
}
foods_experiment <- f[-1,]
foods_experiment
}
startDate <- now() - days(2) #min(glucose$time)
#cgm_display(startDate,now()-days(6))
cgm_display(startDate,startDate+days(2))
cgm_display(start = max(glucose_raw$time)-days(1), end = max(glucose_raw$time))
theme_set(theme_stata())
foodlist <- c("Oatmeal (plain)","Oatmeal w/milk","Oatmeal w/butter", "Oatmeal w/cinnamon")
food_effect(foodlist) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after eating oatmeal", x = "Minutes", y = "mg/dL")
foodlist <- c("Potato (reheated)","Lamb + potato")
food_effect(foodlist) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after eating potatoes", x = "Minutes", y = "mg/dL")
## Beer
foodlist <- activity_raw %>% dplyr::filter(str_detect(str_to_lower(activity_raw$Comment),pattern = "beer")) %>% .$Comment
food_effect(foodlist) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after drinking beer", x = "Minutes", y = "mg/dL")
#
## Pasta
foodlist <- c("Pesto pasta","Pasta whole wheat w/tomato",  "Pasta mushroom chicken")
food_effect(foodlist) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after eating pasta", x = "Minutes", y = "mg/dL")
#
## Apples
foodlist <- c("Apple")
food_effect(foodlist, timelength = hours(1)) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after eating an apple", x = "Minutes", y = "mg/dL")
#
## ramen
foodlist <- c("Ramen", "donut")
food_effect(foodlist, timelength = hours(2)) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after eating instant ramen", x = "Minutes", y = "mg/dL")
#
foodlist <- c("Blueberry Kefir", "Blueberry Kefir w Cinnamon")
food_effect(foodlist, timelength = hours(2)) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after drinking kefir", x = "Minutes", y = "mg/dL")
#
from <- activity_raw %>% filter(Comment == "Apple juice") %>% .$Start
food_effect(foodlist = c("Apple juice","Apple juice + donut")) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after apple juice", x = "Minutes", y = "mg/dL")
ggplot(data = glucose_raw %>% filter(time > from
& time < (from + hours(2))),
aes(x=time,y=value)) + geom_line(size=2, color = "red") + glucose_target_gg +
# scale_x_continuous() +
labs(title = "Glucose after drinking apple juice", x = "Minutes", y = "mg/dL")
cgm_display(start = activity_raw %>% filter(Comment == "Apple juice") %>% .$Start,
end = activity_raw %>% filter(Comment == "Apple juice") %>% .$Start + hours(2))
cgm_display(start = activity_raw %>% filter(Comment == "Ramen") %>% .$Start,
end = activity_raw %>% filter(Comment == "Ramen") %>% .$Start + hours(2))
foods_experiment <- food_effect(foodlist="Ice Cream")
foods_experiment %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after eating ice cream", x = "Minutes", y = "mg/dL")
cgm_display(start = activity_raw %>% filter(Comment == "Blueberry-banana") %>% pull(Start),
end = activity_raw %>% filter(Comment == "Blueberry-banana") %>% pull(Start) + hours(2)
) + labs(x = "time", title = "After a smoothie", subtitle = "Glucose (mg/dL)", y = "mg/dL") + scale_x_datetime(limits = c(activity_raw %>% filter(Comment == "Blueberry-banana") %>% pull(Start),
activity_raw %>% filter(Comment == "Blueberry-banana") %>% pull(Start) + hours(2)))
foodlist <- activity_raw %>% dplyr::filter(str_detect(str_to_lower(activity_raw$Comment),pattern = "latte")) %>% .$Comment
food_effect(foodlist) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after drinking a latte", x = "Minutes", y = "mg/dL")
food_effect(foodlist) %>% group_by(experiment) %>% summarize(max(value), min(value), change = max(value)-min(value))  %>% knitr::kable(caption = "Glucose Changes from drinking a latte")
foodlist <- c("Salmon")
food_effect(foodlist, timelength = hours(1)) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after eating an apple", x = "Minutes", y = "mg/dL")
#
shiny::runApp('librelink')
library(readxl)
libre_raw <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Librelink.xlsx"))
libre_raw$`Meter Timestamp` <- lubridate::force_tz(libre_raw$`Meter Timestamp`, "US/Pacific")
activity_raw_2019 <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Rik Activity 2019.xlsx"),
sheet = "2019")
activity_raw_2018 <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Rik Activity 2019.xlsx"),
sheet = "2018")
activity_raw <- rbind(activity_raw_2018,activity_raw_2019)
library(tidyverse)
library(lubridate)
library(ggthemes)
activity_raw$Start <- activity_raw$Start %>% lubridate::parse_date_time(order = "ymd HMS",tz = "US/Pacific")
activity_raw$End <- activity_raw$End %>% lubridate::parse_date_time(order = "ymd HMS", tz = "US/Pacific")
glucose <- libre_raw %>% select(time = "Meter Timestamp",
scan = "Scan Glucose(mg/dL)",
hist = "Historic Glucose(mg/dL)",
strip = "Strip Glucose(mg/dL)",
food = "Notes")
#glucose$time <- readr::parse_datetime(libre_raw$`Meter Timestamp`,locale = locale(tz="US/Pacific"))
glucose$time <- as_datetime(libre_raw$`Meter Timestamp`, tz = "US/Pacific")
#
glucose$value <- dplyr::if_else(is.na(glucose$scan),glucose$hist,glucose$scan)
# apply correction for faulty 2019-01-08 sensor
#glucose$value <- dplyr::if_else(glucose$time>as_datetime("2019-01-08"),glucose$value+35,glucose$value)
glucose_raw <- glucose
# libre_raw$`Meter Timestamp` %>% lubridate::parse_date_time(order = "ymd HMS",tz = "US/Pacific")
# a handy ggplot object that draws a band through the "healthy" target zones across the width of any graph:
glucose_target_gg <-   geom_rect(aes(xmin=as.POSIXct(-Inf,  origin = "1970-01-01"),
xmax=as.POSIXct(Inf,  origin= "1970-01-01"),
ymin=100,ymax=140),
alpha = 0.01, fill = "#CCCCCC",
inherit.aes = FALSE)
# show glucose levels between start and end times
cgm_display <- function(start=lubridate::now()-lubridate::hours(18),
end=now(),
activity_df=activity_raw,
glucose_df=glucose_raw) {
ggplot(glucose_df ,aes(x=time,y=value)) + geom_line(size=2, color = "red")+
geom_point(stat = "identity", aes(x=time,y=strip), color = "blue")+
glucose_target_gg +
geom_rect(data=activity_df %>% dplyr::filter(Activity == "Sleep") %>%
select(xmin = Start,xmax = End) %>% cbind(ymin = -Inf, ymax = Inf),
aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
fill="red",
alpha=0.2,
inherit.aes = FALSE) +
geom_rect(data=activity_df %>% dplyr::filter(Activity == "Exercise") %>%
select(xmin = Start,xmax = End),
aes(xmin=xmin,xmax=xmax,ymin=-Inf,ymax=Inf),
fill="blue",
alpha=0.2,
inherit.aes = FALSE) +
geom_vline(xintercept = activity_df %>%
dplyr::filter(Activity == "Event" & Comment == "awake") %>% select("Start") %>% unlist(),
color = "green") +
geom_vline(xintercept = activity_df %>%
dplyr::filter(Activity == "Food") %>% select("Start") %>% unlist(),
color = "yellow")+
geom_text(data = activity_df %>%
dplyr::filter(Activity == "Food") %>% select("Start","Comment") ,
aes(x=Start,y=50, angle=90, hjust = FALSE,  label = Comment),
size = 6) +
labs(title = "Glucose (mg/dL)", subtitle = start) +  theme(plot.title = element_text(size=22))+
scale_x_datetime(limits = c(start,end),
date_labels = "%m/%d %H:%M",
timezone = "US/Pacific")
}
# returns a dataframe giving all glucose values within "timelength" of a specific activity
food_effect <- function( foodlist = c("Oatmeal","Oatmeal w cinnamon"), activity_df = activity_raw, glucose_df = glucose_raw, timelength = lubridate::hours(2)){
#food_df <- activity_df %>% dplyr::filter(str_detect(str_to_lower(activity_df$Comment),pattern = foodname))
food_df <- activity_df %>% dplyr::filter(Comment %in% foodlist)
food_df$Comment <- paste0(food_df$Comment,rownames(food_df))
food_df_interval <- interval(food_df$Start,food_df$Start + hours(1))
food_glucose <- glucose_df %>% dplyr::filter(apply(sapply(glucose_df$time,function(x) x %within% food_df_interval),2,any))
# food_glucose <- glucose_df %>% dplyr::filter(sapply(glucose_df$time,function(x) x %within% food_df_interval))
f <- cbind(food_glucose[1,],experiment = "test")
a = NULL
for(i in food_df$Start){
i_time <- as_datetime(i, tz = "US/Pacific")
# < rbind(i,a)
g <- glucose_df %>% dplyr::filter(time %within% interval(i_time - minutes(10), i_time + timelength))
#print(g)
p = match(as_datetime(i),food_df$Start)
f <- rbind(f,cbind(g,experiment = food_df$Comment[p]))
}
foods_experiment <- f[-1,]
foods_experiment
}
startDate <- now() - days(2) #min(glucose$time)
#cgm_display(startDate,now()-days(6))
cgm_display(startDate,startDate+days(2))
startDate <- now() - hours(15) #min(glucose$time)
cgm_display(startDate,startDate+days(2))
cgm_display(startDate,now())
rsconnect::deployApp("librelink")
library(readxl)
libre_raw <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Librelink.xlsx"))
libre_raw$`Meter Timestamp` <- lubridate::force_tz(libre_raw$`Meter Timestamp`, "US/Pacific")
activity_raw_2019 <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Rik Activity 2019.xlsx"),
sheet = "2019")
activity_raw_2018 <- readxl::read_excel(file.path(Sys.getenv("ONEDRIVE"),"Sprague 2019","Health 2019","Rik Activity 2019.xlsx"),
sheet = "2018")
activity_raw <- rbind(activity_raw_2018,activity_raw_2019)
library(tidyverse)
library(lubridate)
library(ggthemes)
activity_raw$Start <- activity_raw$Start %>% lubridate::parse_date_time(order = "ymd HMS",tz = "US/Pacific")
activity_raw$End <- activity_raw$End %>% lubridate::parse_date_time(order = "ymd HMS", tz = "US/Pacific")
glucose <- libre_raw %>% select(time = "Meter Timestamp",
scan = "Scan Glucose(mg/dL)",
hist = "Historic Glucose(mg/dL)",
strip = "Strip Glucose(mg/dL)",
food = "Notes")
#glucose$time <- readr::parse_datetime(libre_raw$`Meter Timestamp`,locale = locale(tz="US/Pacific"))
glucose$time <- as_datetime(libre_raw$`Meter Timestamp`, tz = "US/Pacific")
#
glucose$value <- dplyr::if_else(is.na(glucose$scan),glucose$hist,glucose$scan)
# apply correction for faulty 2019-01-08 sensor
#glucose$value <- dplyr::if_else(glucose$time>as_datetime("2019-01-08"),glucose$value+35,glucose$value)
glucose_raw <- glucose
# libre_raw$`Meter Timestamp` %>% lubridate::parse_date_time(order = "ymd HMS",tz = "US/Pacific")
# a handy ggplot object that draws a band through the "healthy" target zones across the width of any graph:
glucose_target_gg <-   geom_rect(aes(xmin=as.POSIXct(-Inf,  origin = "1970-01-01"),
xmax=as.POSIXct(Inf,  origin= "1970-01-01"),
ymin=100,ymax=140),
alpha = 0.01, fill = "#CCCCCC",
inherit.aes = FALSE)
# show glucose levels between start and end times
cgm_display <- function(start=lubridate::now()-lubridate::hours(18),
end=now(),
activity_df=activity_raw,
glucose_df=glucose_raw) {
ggplot(glucose_df ,aes(x=time,y=value)) + geom_line(size=2, color = "red")+
geom_point(stat = "identity", aes(x=time,y=strip), color = "blue")+
glucose_target_gg +
geom_rect(data=activity_df %>% dplyr::filter(Activity == "Sleep") %>%
select(xmin = Start,xmax = End) %>% cbind(ymin = -Inf, ymax = Inf),
aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax),
fill="red",
alpha=0.2,
inherit.aes = FALSE) +
geom_rect(data=activity_df %>% dplyr::filter(Activity == "Exercise") %>%
select(xmin = Start,xmax = End),
aes(xmin=xmin,xmax=xmax,ymin=-Inf,ymax=Inf),
fill="blue",
alpha=0.2,
inherit.aes = FALSE) +
geom_vline(xintercept = activity_df %>%
dplyr::filter(Activity == "Event" & Comment == "awake") %>% select("Start") %>% unlist(),
color = "green") +
geom_vline(xintercept = activity_df %>%
dplyr::filter(Activity == "Food") %>% select("Start") %>% unlist(),
color = "yellow")+
geom_text(data = activity_df %>%
dplyr::filter(Activity == "Food") %>% select("Start","Comment") ,
aes(x=Start,y=50, angle=90, hjust = FALSE,  label = Comment),
size = 6) +
labs(title = "Glucose (mg/dL)", subtitle = start) +  theme(plot.title = element_text(size=22))+
scale_x_datetime(limits = c(start,end),
date_labels = "%m/%d %H:%M",
timezone = "US/Pacific")
}
# returns a dataframe giving all glucose values within "timelength" of a specific activity
food_effect <- function( foodlist = c("Oatmeal","Oatmeal w cinnamon"), activity_df = activity_raw, glucose_df = glucose_raw, timelength = lubridate::hours(2)){
#food_df <- activity_df %>% dplyr::filter(str_detect(str_to_lower(activity_df$Comment),pattern = foodname))
food_df <- activity_df %>% dplyr::filter(Comment %in% foodlist)
food_df$Comment <- paste0(food_df$Comment,rownames(food_df))
food_df_interval <- interval(food_df$Start,food_df$Start + hours(1))
food_glucose <- glucose_df %>% dplyr::filter(apply(sapply(glucose_df$time,function(x) x %within% food_df_interval),2,any))
# food_glucose <- glucose_df %>% dplyr::filter(sapply(glucose_df$time,function(x) x %within% food_df_interval))
f <- cbind(food_glucose[1,],experiment = "test")
a = NULL
for(i in food_df$Start){
i_time <- as_datetime(i, tz = "US/Pacific")
# < rbind(i,a)
g <- glucose_df %>% dplyr::filter(time %within% interval(i_time - minutes(10), i_time + timelength))
#print(g)
p = match(as_datetime(i),food_df$Start)
f <- rbind(f,cbind(g,experiment = food_df$Comment[p]))
}
foods_experiment <- f[-1,]
foods_experiment
}
food_effect(c("CBD")) %>% group_by(experiment) %>% summarize(max(value), min(value), change = max(value)-min(value))  %>% knitr::kable(caption = "Glucose Changes from drinking a latte")
food_effect(c("CBD")) %>% group_by(experiment) %>% mutate(delta = (time - min(time))/60) %>% ggplot(aes(x=delta,y=value, color = experiment)) + geom_line(size = 2) + scale_x_continuous() + labs(title = "Glucose after CBD", x = "Minutes", y = "mg/dL")
